<?xml version="1.0" encoding="utf-8"?>
<mdscript xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WarLibraries" xsi:noNamespaceSchemaLocation="md.xsd">
	<cues>
		<!--
		params: 
			param.[1]: Sector to build station in
			param.[2]: Faction the station belongs too
			param.[3]: Station tag
			param.[4]: Type of station
			param.[5]: Debug chance			
		-->
		<library name="BuildStation" instantiate="true" >
			<params>
				<param name="Level" default="0.9"/>
				<param name="Radius" default="5km"/>
				<param name="MaxDistance" default="100km"/>
				<param name="AllowYaxis" default="false"/>
				<param name="DebugChance" default="0"/>
				<param name="DebugChance2" default="0"/>
			</params>
			<conditions>
				<event_cue_signalled/>
			</conditions>
			<actions>
				<set_value name="$TargetSector" exact="event.param.{1}"/>
				<set_value name="$Faction" exact="event.param.{2}"/>
				<set_value name="$StationTag" exact="event.param.{3}"/>
				<set_value name="$StationType" exact="event.param.{4}"/>
				<set_value name="$DebugChance" exact="event.param.{5}"/>        
				<debug_text text="'BuildStation: TargetSector %1, Faction %2, StationTag %3, StationType %4, DebugChance %5'.[$TargetSector.knownname, $Faction.id, $StationTag, $StationType, $DebugChance]" chance="100"/>
				<do_if value="$TargetSector != null">
					<set_value name="$Station" exact="null"/>
					<set_value name="$StationMacro" exact="null"/>
					<set_value name="$SafePosition" exact="null"/>
					<set_value name="$ConstructionPlan" exact="null"/>
					<set_value name="$Loadouts" exact="null"/>
					<set_value name="$BuildID" exact="null"/>
					<get_construction_plan result="$ConstructionPlan" faction="$Faction" tags="$StationTag"/>
					<do_if value="$ConstructionPlan">
						<get_module_set_macro result="$StationMacro" race="$Faction.primaryrace" type="$StationType"/>
						<get_safe_pos result="$SafePosition" sector="$TargetSector" radius="$Radius" object="$TargetSector" max="$MaxDistance" allowyaxis="$AllowYaxis"/>
						<create_station name="$Station" sector="$TargetSector" owner="$Faction" macro="$StationMacro">
							<safepos value="$SafePosition"/>
						</create_station>
						<debug_text text="'Station exists after creation %1'.[$Station.exists]" chance="$DebugChance2"/>
						<generate_loadout sequence="$ConstructionPlan" level="$Level" result="$Loadouts" faction="$Faction"/>
						<do_all exact="$Loadouts.count" counter="$l">
							<apply_loadout sequence="$ConstructionPlan" index="$l" loadout="$Loadouts.{$l}"/>
						</do_all>
						<add_build_to_expand_station object="$Station.buildstorage" buildobject="$Station" constructionplan="$ConstructionPlan" result="$BuildID"/>
						<debug_text text="'Started construction of station ' + $Station.knownname + ' ' + $Station + ' - Build ID: ' + $BuildID" chance="$DebugChance"/>
					</do_if>
				</do_if>
				<do_else>
					<debug_text text="'No TargetSector given'" chance="$DebugChance2"/>
					<cancel_cue cue="this"/>
				</do_else>
			</actions>
		</library>

		<!--
		input: 
			$AdjacentSectorTarget: [Sector you want the adjacent sectors for]
		output:
			$AdjacentSectorsForSector: [Resulting array of the found sectors]			
		-->	
		<library name="FindAdjacentSectorsForSector">
			<actions>
				<set_value name="$AdjacentSectorsForSector" exact="[]"/>
				<find_sector name="$AdjacentSectors_InCluster" space="$AdjacentSectorTarget.cluster" multiple="true" />
				<do_all exact="$AdjacentSectors_InCluster.count" counter="$UpdateData_AdjacentSectors_IC_Counter">
					<do_if value="not $AdjacentSectorsForSector.indexof.{$AdjacentSectors_InCluster.{$UpdateData_AdjacentSectors_IC_Counter}}">
						<append_to_list name="$AdjacentSectorsForSector" exact="$AdjacentSectors_InCluster.{$UpdateData_AdjacentSectors_IC_Counter}"/>
					</do_if>
				</do_all>

				<find_gate name="$JumpGates" space="$AdjacentSectorTarget" active="true" multiple="true"/>
				<do_all exact="$JumpGates.count" counter="$UpdateData_JumpGate_Counter">
					<do_if value="$JumpGates.{$UpdateData_JumpGate_Counter}.destination">
						<append_to_list name="$AdjacentSectorsForSector" exact="$JumpGates.{$UpdateData_JumpGate_Counter}.destination.sector"/>
					</do_if>
				</do_all>
			</actions>
		</library>

		<!--
		input:
			$SectorToGetExpectedMilitaryJobs: [Sector you want to get the expected military jobs for]
		output:
			$CalculatedExpectedMilitaryJobs: [The expected military jobs for the sector]
		-->
		<library name="GetExpectedMilitaryJobsForSector">
			<actions>
				<set_value name="$SecurityForSector" exact="$SectorToGetExpectedMilitaryJobs.security" />
				<set_value name="$CalculatedExpectedMilitaryJobs" exact="[tag.fighterwing]" />
				<set_value name="$AdjacentSectorTarget" exact="$SectorToGetExpectedMilitaryJobs" />
				<include_actions ref="md.WarLibraries.FindAdjacentSectorsForSector"/>
				<do_all exact="$AdjacentSectorsForSector.count" counter="$AdjacentSectorsForSectorCounter" >
					<get_factions_by_relation result="$AdjecentSectorForSectoryEnemyCount" object="$AdjacentSectorsForSector.{$AdjacentSectorsForSectorCounter}" relation="killmilitary" />
					<get_factions_by_relation result="$AdjecentSectorForSectoryNeutralCount" object="$AdjacentSectorsForSector.{$AdjacentSectorsForSectorCounter}" relation="neutral" />
					<do_if value="$AdjecentSectorForSectoryEnemyCount.count gt 0">
						<set_value name="$CalculatedExpectedMilitaryJobs" exact="[tag.cruiser,tag.fighterwing]" />					
						<break />
					</do_if>
					<do_elseif value="$AdjecentSectorForSectoryNeutralCount.count gt 0">
						<set_value name="$CalculatedExpectedMilitaryJobs" exact="[tag.destroyer,tag.fighterwing]" />					
						<break />
					</do_elseif>					
				</do_all>
				<do_if value="$SecurityForSector gt 0.49f">
					<set_value name="$CalculatedExpectedMilitaryJobs" exact="[tag.destroyer,tag.fighterwing]" />										
				</do_if>								
				<do_if value="$SecurityForSector gt 0.74f">
					<set_value name="$CalculatedExpectedMilitaryJobs" exact="[tag.carrier,tag.fighterwing]" />										
				</do_if>				
			</actions>	
		</library>
		
		<!--
		input:
			$UsableWareFaction: [Faction to get usable ware for],
			$UsableWareFactionSpecific: [Boolean for getting only a faction specific ware]
		output:
			$UsableWareForFaction: [The usable ware for faction]		
		-->
		<library name="GetUsableWareForFaction">
			<actions>
				<set_value name="$UsableWareForFaction" exact="ware.energycells" />
				<set_value name="$Wares_Common_Types" exact="[
					ware.advancedcomposites, ware.advancedelectronics, ware.antimattercells, ware.antimatterconverters, ware.claytronics,
					ware.dronecomponents, ware.energycells, ware.engineparts, ware.fieldcoils, ware.graphene, ware.hullparts, ware.medicalsupplies,
					ware.microchips, ware.missilecomponents, ware.plasmaconductors, ware.quantumtubes, ware.scanningarrays, ware.shieldcomponents,
					ware.siliconwafers, ware.spices, ware.superfluidcoolant, ware.turretcomponents, ware.weaponcomponents, ware.water, ware.smartchips]" />
				
				<set_value name="$Wares_Argon_Types" exact="[ware.foodrations,ware.meat,ware.refinedmetals,ware.spacefuel,ware.wheat]" />
				<set_value name="$Wares_Hatikvah_Types" exact="[ware.spacefuel]" />
				<set_value name="$Wares_ScalePlate_Types" exact="[ware.majadust,ware.spaceweed]" />
				<set_value name="$Wares_Paranid_Types" exact="[ware.refinedmetals,ware.majasnails,ware.sojabeans,ware.sojahusk]" />
				<set_value name="$Wares_Teladi_Types" exact="[ware.nostropoil,ware.spaceweed,ware.sunriseflowers,ware.teladianium,ware.swampplant]" />
				<set_value name="$Wares_Xenon_Types" exact="[ware.energycells]" />
				
				<do_if value="$UsableWareFactionSpecific">
					<do_if value="$UsableWareFaction.id == 'argon' or $UsableWareFaction.id == 'antigone'">
						<shuffle_list list="$Wares_Argon_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_Argon_Types.{1}" />
					</do_if>
					<do_elseif value="$UsableWareFaction.id == 'paranid' or $UsableWareFaction.id == 'holyorder'">
						<shuffle_list list="$Wares_Paranid_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_Paranid_Types.{1}" />
					</do_elseif>
					<do_elseif value="$UsableWareFaction.id == 'hatikvah'">
						<set_value name="$UsableWareForFaction" exact="$Wares_Hatikvah_Types.{1}" />
					</do_elseif>
					<do_elseif value="$UsableWareFaction.id == 'teladi'">
						<shuffle_list list="$Wares_Teladi_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_Teladi_Types.{1}" />
					</do_elseif>
					<do_elseif value="$UsableWareFaction.id == 'scaleplate'">
						<shuffle_list list="$Wares_ScalePlate_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_ScalePlate_Types.{1}" />
					</do_elseif>
					<do_elseif value="$UsableWareFaction.id == 'xenon'">
						<set_value name="$UsableWareForFaction" exact="$Wares_Xenon_Types.{1}" />
					</do_elseif>
				</do_if>
				<do_else>
					<do_if value="$UsableWareFaction.id == 'argon' or $UsableWareFaction.id == 'antigone'">
						<append_to_list name="$Wares_Common_Types" exact="$Wares_Argon_Types" />
						<shuffle_list list="$Wares_Common_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_Common_Types.{1}" />
					</do_if>
					<do_elseif value="$UsableWareFaction.id == 'paranid' or $UsableWareFaction.id == 'holyorder'">
						<append_to_list name="$Wares_Common_Types" exact="$Wares_Paranid_Types" />
						<shuffle_list list="$Wares_Common_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_Common_Types.{1}" />
					</do_elseif>
					<do_elseif value="$UsableWareFaction.id == 'hatikvah'">
						<append_to_list name="$Wares_Common_Types" exact="$Wares_Hatikvah_Types" />
						<shuffle_list list="$Wares_Common_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_Common_Types.{1}" />
					</do_elseif>
					<do_elseif value="$UsableWareFaction.id == 'teladi'">
						<append_to_list name="$Wares_Common_Types" exact="$Wares_Teladi_Types" />
						<shuffle_list list="$Wares_Common_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_Common_Types.{1}" />
					</do_elseif>
					<do_elseif value="$UsableWareFaction.id == 'scaleplate'">
						<append_to_list name="$Wares_Common_Types" exact="$Wares_ScalePlate_Types" />
						<shuffle_list list="$Wares_Common_Types" />
						<set_value name="$UsableWareForFaction" exact="$Wares_Common_Types.{1}" />
					</do_elseif>
					<do_elseif value="$UsableWareFaction.id == 'xenon'">
						<set_value name="$UsableWareForFaction" exact="$Wares_Xenon_Types.{1}" />
					</do_elseif>		
				</do_else>
				<debug_text text="'UsableWareForFaction: %1'.[$UsableWareForFaction]" chance="100" />
			</actions>
		</library>
	</cues>
</mdscript>
